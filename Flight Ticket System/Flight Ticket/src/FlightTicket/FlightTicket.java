/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FlightTicket;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PRAVHAT, SARBIN, BIBEK
 */
public class FlightTicket extends javax.swing.JFrame {
    //STORES CUSTOMERS DETAILS
    private ArrayList<Object[]> arrayList = new ArrayList();
    //STORES FLIGHT DETAILS
    ArrayList<Object[]> array = new ArrayList<>();

    /**
     * Creates new form FlightTicket
     */
    public FlightTicket() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        tital = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        dLabel = new javax.swing.JLabel();
        depart = new javax.swing.JTextField();
        arLabel = new javax.swing.JLabel();
        arrival = new javax.swing.JTextField();
        fNameLabel = new javax.swing.JLabel();
        flightName = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        dTimeLabel = new javax.swing.JLabel();
        departTime = new javax.swing.JTextField();
        arTimeLabel = new javax.swing.JLabel();
        arrivalTime = new javax.swing.JTextField();
        pLabel = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightDetails = new javax.swing.JTable();
        SearchButton1 = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        cmbSearch = new javax.swing.JComboBox<>();
        btnRefresh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        fLabel = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        tLabel = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        line = new javax.swing.JLabel();
        rTrip = new javax.swing.JRadioButton();
        oneWay = new javax.swing.JRadioButton();
        dLabel1 = new javax.swing.JLabel();
        departure = new javax.swing.JTextField();
        rdLabel = new javax.swing.JLabel();
        return1 = new javax.swing.JTextField();
        passenger = new javax.swing.JComboBox<>();
        pssLabel = new javax.swing.JLabel();
        csLabel = new javax.swing.JLabel();
        serviceClass = new javax.swing.JComboBox<>();
        nLabel = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        addLabel = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        passLabel = new javax.swing.JLabel();
        conLabel = new javax.swing.JLabel();
        passport = new javax.swing.JTextField();
        contact = new javax.swing.JTextField();
        submit = new javax.swing.JButton();
        details = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        _import = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tital.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tital.setText("Fligth Ticket Details");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(344, 344, 344)
                .addComponent(tital, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(tital)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        dLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dLabel.setText("DEPARTURE:");

        depart.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        arLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        arLabel.setText("ARRIVAL:");

        arrival.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        fNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fNameLabel.setText("FLIGHT NAME:");

        flightName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        dateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateLabel.setText("DATE:");

        date.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        dTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dTimeLabel.setText("DEPART TIME:");

        departTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        arTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        arTimeLabel.setText("ARRIVAL TIME:");

        arrivalTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        pLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pLabel.setText("PRICE:");

        price.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        addButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        flightDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DEPARTURE", "ARRIVAL", "FLIGHT NAME", "DATE", "DEPART TIME", "ARRIVAL TIME", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(flightDetails);
        if (flightDetails.getColumnModel().getColumnCount() > 0) {
            flightDetails.getColumnModel().getColumn(0).setResizable(false);
            flightDetails.getColumnModel().getColumn(1).setResizable(false);
            flightDetails.getColumnModel().getColumn(2).setResizable(false);
            flightDetails.getColumnModel().getColumn(3).setResizable(false);
            flightDetails.getColumnModel().getColumn(4).setResizable(false);
            flightDetails.getColumnModel().getColumn(5).setResizable(false);
            flightDetails.getColumnModel().getColumn(6).setResizable(false);
        }

        SearchButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SearchButton1.setText("Search");
        SearchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButton1ActionPerformed(evt);
            }
        });

        searchText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        cmbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Any", "Price", "Departure" }));
        cmbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSearchActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton1)
                        .addGap(41, 41, 41))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(pLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(flightName, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(departTime, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                    .addComponent(depart))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(arTimeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(arLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(arrival, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dLabel)
                    .addComponent(depart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arLabel)
                    .addComponent(arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fNameLabel)
                    .addComponent(flightName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arTimeLabel)
                    .addComponent(arrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dTimeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton)
                    .addComponent(pLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchButton1)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        fLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fLabel.setText("From");

        txtFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tLabel.setText("To");

        txtTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        search.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        search.setText("Search Now");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        line.setText("_______________________________________________________");

        buttonGroup2.add(rTrip);
        rTrip.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rTrip.setText("Round-Trip");

        buttonGroup2.add(oneWay);
        oneWay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        oneWay.setText("One-Way");

        dLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dLabel1.setText("Depart Date");

        departure.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        rdLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rdLabel.setText("Return Date");

        return1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        passenger.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        passenger.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Children", "Adobe", "old", " " }));

        pssLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pssLabel.setText("Passenger");

        csLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        csLabel.setText("Class of Service");

        serviceClass.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        serviceClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "E-Class", "B-Class", "F-Class" }));

        nLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nLabel.setText("Name:");

        address.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        addLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addLabel.setText("Address:");

        name.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        passLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        passLabel.setText("Passport:");

        conLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        conLabel.setText("Contact:");

        passport.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        contact.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        submit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        details.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        details.setText("View Customer Details");
        details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(conLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(passport, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                    .addComponent(contact)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(addLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pssLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(departure, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dLabel1)
                                    .addComponent(oneWay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rdLabel)
                                    .addComponent(return1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rTrip)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tLabel)
                            .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(search))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(passenger, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(csLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(serviceClass, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(details)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fLabel)
                    .addComponent(tLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search)
                .addGap(5, 5, 5)
                .addComponent(line, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rTrip)
                    .addComponent(oneWay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dLabel1)
                    .addComponent(rdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(return1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pssLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serviceClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nLabel)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLabel)
                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passLabel)
                    .addComponent(passport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(conLabel)
                    .addComponent(contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(details)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jMenu2.setText("File");

        _import.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        _import.setSelected(true);
        _import.setText("Import");
        _import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _importActionPerformed(evt);
            }
        });
        jMenu2.add(_import);

        jCheckBoxMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Exit");
        jCheckBoxMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__importActionPerformed
        // IMPORTS FILE FROM CSV
        File f = new File("C:\\Users\\00np1\\Desktop\\FlightDetails.csv"); //SELECT FILE
        try {
            Scanner read = new Scanner(new FileReader(f)); //READ FILE
            while (read.hasNextLine()) { // LOOP EXECUTING NEXT LTNE
                Object[] list = read.nextLine().split(",");
                addTable(list, "AddList");//ADD TO TABLE AND LIST
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FlightTicket.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event__importActionPerformed
    public String getTrip() {//GETTER FOR TRIP
        if (rTrip.isSelected()) {
            return "Round Trip";
        } else if (oneWay.isSelected()) {
            return "One Way";
        } else {
            return null;
        }
    }

    public String getDeparture() { //GETTER FOR DEPARTUR
        if ("".equals(departure.getText())) {
            return null;
        } else {
            return departure.getText();
        }
    }

    public String getFName() { // GATE FIRST NAME
        if (name.getText().equals("")) {
            return null;
        } else {
            return name.getText();
        }
    }

    public String getAddress() { //GET ADDRESS
        if (address.getText().equals("")) {
            return null;
        } else {
            return address.getText();
        }
    }

    public String getPassport() { //GET PASSPORT
        if (passport.getText().equals("")) {
            return null;
        } else {
            return passport.getText();
        }
    }

    public String getContact() { //GETS CONTACT
        if (contact.getText().equals("")) {
            return null;
        } else {
            return contact.getText();
        }
    }

    public String getPassenger() { //GET PASSENGER
        return "" + passenger.getSelectedItem();
    }

    public String getServiceClass() { //GET SERVICE CLASS
        return "" + serviceClass.getSelectedItem();
    }

    public String getReturn1() { //GET RETURN TIME
        if (return1.getText().equals("")) {
            return null;
        } else {
            return return1.getText();
        }
    }
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // ADD DATA IN aRRAY IST WHICH STORES DATA OF CUSTOMER
        if (!"".equals(getTrip()) && !"".equals(getDeparture()) && !"".equals(getReturn1()) && !"".equals(getPassenger()) && !"".equals(getServiceClass()) && !"".equals(getName()) && !"".equals(getAddress()) && !"".equals(getPassport()) && !"".equals(getContact())) {
            Object lil[] = {getTrip(), getDeparture(), getReturn1(), getPassenger(), getServiceClass(), getName(), getAddress(), getPassport(), getContact()};
            arrayList.add(lil);
            clearfield();
            JOptionPane.showMessageDialog(rootPane, "Details has been Submitted");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Required Information is Missing");
        }
    }//GEN-LAST:event_submitActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // ACTION PERFORMED BY ADD BUTTON 
    // ADD DATA  TO LIST AND ADD TO TABLE IF DATA IS VALID
        if (!"".equals(depart.getText()) && !"".equals(arrival.getText()) && !"".equals(flightName.getText()) && !"".equals(date.getText()) && !"".equals(departTime.getText()) && !"".equals(arrivalTime.getText()) && !"".equals(price.getText())) {
            if (flightDetails.getRowCount() == 0) {
                try {
                    Object[] li = {depart.getText(), arrival.getText(), flightName.getText(), date.getText(), departTime.getText(), arrivalTime.getText(), Integer.parseInt(price.getText())};
                    addTable(li, "AddList");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(rootPane, "Price should be in number");
                }
            } else {
                try {
                    int a = 0;
                    for (int i = 0; i < flightDetails.getRowCount(); i++) {
                        if (depart.getText().equals((String) flightDetails.getValueAt(i, 0)) && arrival.getText().equals((String) flightDetails.getValueAt(i, 1)) && flightName.getText().equals((String) flightDetails.getValueAt(i, 2)) && date.getText().equals((String) flightDetails.getValueAt(i, 3)) && departTime.getText().equals((String) flightDetails.getValueAt(i, 4)) && arrivalTime.getText().equals((String) flightDetails.getValueAt(i, 5)) && Integer.parseInt(price.getText()) == (Integer.parseInt("" + flightDetails.getValueAt(i, 6)))) {
                            break;
                        } else {
                            a++;
                        }
                    }
                    if (a == flightDetails.getRowCount()) {
                        try {
                            Object[] li = {depart.getText(), arrival.getText(), flightName.getText(), date.getText(), departTime.getText(), arrivalTime.getText(), Integer.parseInt(price.getText())};
                            addTable(li, "AddList");
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(rootPane, "Price should be in number");
                        }

                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Details Already Exist!");
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, e);
                }

            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Required Information is Missing");
        }
    }//GEN-LAST:event_addButtonActionPerformed
/**
 * NEW FRAME 
 * TO SHOW DETAILS OF CUSTOMER
 * DISPLAYS FROM A ARRAYLIST
 * @param evt 
 */
    private void detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsActionPerformed
        // CALLS CUSTOMER DETAILS TABLE
        CustomerDetails c = new CustomerDetails();
        for (Object[] o : arrayList) {
            System.out.println(o);
            DefaultTableModel model = (DefaultTableModel) c.custDetails.getModel();
            model.addRow(o);
        }
        c.setLocationRelativeTo(null);
        c.setVisible(true);

    }//GEN-LAST:event_detailsActionPerformed

    private void SearchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButton1ActionPerformed
        // ACTION PERFORMED BY SEARCH BUTTON SEARCH THROUGH PRICE
        //CALLS BUBBLE SORT METHOD TO SEART AND BINARY SEARCH TO SEARCH
        int arr[] = new int[array.size()];
        ArrayList<Object[]> sorted = bubbleSort(array);
        int count = 0;
        try {
            int toSearch = Integer.parseInt(searchText.getText());
            for (Object[] i : sorted) {
                arr[count] = Integer.parseInt("" + i[6]);
                count++;
            }

            int index = searched(arr, toSearch);
            String s = "Departure: " + sorted.get(index)[0] + "\n"
                    + "Arrival: " + sorted.get(index)[1] + "\n"
                    + "Flight Time: " + sorted.get(index)[2] + "\n"
                    + "Date : " + sorted.get(index)[3] + "\n"
                    + "Depart Time : " + sorted.get(index)[4] + "\n"
                    + "Arrival time : " + sorted.get(index)[5] + "\n"
                    + "Price : " + sorted.get(index)[6] + "\n";
            JOptionPane.showMessageDialog(rootPane, s);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Input Number");
        }


    }//GEN-LAST:event_SearchButton1ActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // SEARCH USING DESTINATION
        //COMPARES DATA FROM TABLE AND DISPLAY NEW DATA
        String form = txtFrom.getText().toLowerCase();
        String to = txtTo.getText().toLowerCase();

        DefaultTableModel model = (DefaultTableModel) flightDetails.getModel();
        if (!array.isEmpty()) {
            if (!form.equals("") && !to.equals("")) {
                model.setRowCount(0);
            }
        }

        for (Object[] i : array) {
            if (i[0].toString().toLowerCase().equals(form) && i[1].toString().toLowerCase().equals(to)) {
                addTable(i, "DontAdd");
            }
        }
        clearfield();

    }//GEN-LAST:event_searchActionPerformed

    private void cmbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSearchActionPerformed
        // SORT DATA ACCORDANCE WITH DATA SELECTED IN COMBOBOX

        if (cmbSearch.getSelectedIndex() != 0 && !array.isEmpty()) {
            if (("" + cmbSearch.getSelectedItem()).equals("Price")) {
                ArrayList<Object[]> sorted = bubbleSort(array);

            }
            if (("" + cmbSearch.getSelectedItem()).equals("Departure")) {
                ArrayList<Object[]> sorted = bubbleSortString(array);
            }
            DefaultTableModel model = (DefaultTableModel) flightDetails.getModel();
            model.setRowCount(0);
            for (Object[] i : array) {
                System.out.println(i[6]);
                addTable(i, "DontAdd");
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "No data");
        }
    }//GEN-LAST:event_cmbSearchActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // RESTORE DATA TO INITIAL STAGE AFTER DATA IS CHANGED OR ALTERED
        DefaultTableModel model = (DefaultTableModel) flightDetails.getModel();
        model.setRowCount(0);
        if (!array.isEmpty()) {
            for (Object[] i : array) {
                addTable(i, "DontAdd");
            }
        }

    }//GEN-LAST:event_btnRefreshActionPerformed

    private void jCheckBoxMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
        // TO EXIT AND CLOSE PROGRAM
        System.exit(0);
    }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // OPENS HELP PDF
        try {
            
            Desktop.getDesktop().open(new File("C:\\Users\\00np1\\Desktop\\Help.pdf")); //OPENS FILE USING DEFAULTS PROGRAM IN PC
        } catch(FileNotFoundException e ){
            JOptionPane.showMessageDialog(rootPane, "Unable to open "); //IF NOT FOUND
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "File Not Found");
        }catch (IllegalArgumentException e){
            JOptionPane.showMessageDialog(rootPane, "File dont Exixts");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlightTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlightTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlightTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlightTicket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FlightTicket frame = new FlightTicket();
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }
    public void clearfield(){ //clear alll text fields
        depart.setText("");
        flightName.setText("");
        date.setText("");
        departTime.setText("");
       rTrip.setText("");
        arrival.setText("");
        arrivalTime.setText("");
        name.setText("");
        passport.setText("");
        price.setText("");
        address.setText("");
        contact.setText(""); 
        txtFrom.setText("");
        txtTo.setText("");
        departure.setText("");
        return1.setText("");
   }

    private void addTable(Object[] li, String s) {
        // add to arraylist and string
        clearfield();
        if (s.equals("AddList")) {
            array.add(li);
        }
        DefaultTableModel model = (DefaultTableModel) flightDetails.getModel();
        model.addRow(li);

    }

    public ArrayList<Object[]> bubbleSort(ArrayList<Object[]> list) {
        //SORTS STRING TAKES AN aRRAY LIST WHICH HAS LIST INSDE
        //HAS INTEGER IN 6 TH UNDEX OF LIST AND IT SORTA ARRAYLIST ACCORDANCE ITH SIXTH INDEX
        int n = list.size();
        Object[] temp;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < (n - i); j++) {
                if (Integer.parseInt(list.get(j - 1)[6].toString()) > Integer.parseInt(list.get(j)[6].toString())) {
                    //swap elements  
                    temp = list.get(j - 1);
                    list.set(j - 1, list.get(j));
                    list.set(j, temp);
                }

            }
        }
        return list;

    }

    public ArrayList<Object[]> bubbleSortString(ArrayList<Object[]> list) {
        //USE BINARY SEARCH TO SEARCH 
        //TAKES ARRAYLIST HAVING LIST INSIDE
        int n = list.size();
        Object[] temp;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < (n - i); j++) {
                if (list.get(j - 1)[0].toString().compareToIgnoreCase(list.get(j)[0].toString()) > 0) {
                    //swap elements  
                    temp = list.get(j - 1);
                    list.set(j - 1, list.get(j));
                    list.set(j, temp);
                }

            }
        }
        return list;

    }
//START OF BINARY SEARCH
    public int searched(int[] arr, int x) {
        int n = arr.length;
        int result = binarySearch(arr, 0, n - 1, x);//FST INDEX, LAST INDEX, ITEM TO BE SEARCHED
        if (result == -1) {
            JOptionPane.showMessageDialog(rootPane, "Element Dosent Exists");// ID NOT EXIST
            return -1;
        } else {
            return result;
        }
    }

    public int binarySearch(int arr[], int l, int r, int x) {
        if (r >= l) {
            int mid = l + (r - l) / 2;
            if (arr[mid] == x) {
                // IF SEARCHED VALUE IS IN MIDDLE
                return mid;
            }
            if (arr[mid] > x) {
                // IF IN RIGHT SIDE
                return binarySearch(arr, l, mid - 1, x);
            }
            return binarySearch(arr, mid + 1, r, x);
            // IF IS IN LEFT SIDE
        }
        return -1;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchButton1;
    private javax.swing.JCheckBoxMenuItem _import;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel addLabel;
    private javax.swing.JTextField address;
    private javax.swing.JLabel arLabel;
    private javax.swing.JLabel arTimeLabel;
    private javax.swing.JTextField arrival;
    private javax.swing.JTextField arrivalTime;
    private javax.swing.JButton btnRefresh;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cmbSearch;
    private javax.swing.JLabel conLabel;
    private javax.swing.JTextField contact;
    private javax.swing.JLabel csLabel;
    private javax.swing.JLabel dLabel;
    private javax.swing.JLabel dLabel1;
    private javax.swing.JLabel dTimeLabel;
    private javax.swing.JTextField date;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField depart;
    private javax.swing.JTextField departTime;
    private javax.swing.JTextField departure;
    private javax.swing.JButton details;
    private javax.swing.JLabel fLabel;
    private javax.swing.JLabel fNameLabel;
    private javax.swing.JTable flightDetails;
    private javax.swing.JTextField flightName;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel line;
    private javax.swing.JLabel nLabel;
    private javax.swing.JTextField name;
    private javax.swing.JRadioButton oneWay;
    private javax.swing.JLabel pLabel;
    private javax.swing.JLabel passLabel;
    private javax.swing.JComboBox<String> passenger;
    private javax.swing.JTextField passport;
    private javax.swing.JTextField price;
    private javax.swing.JLabel pssLabel;
    private javax.swing.JRadioButton rTrip;
    private javax.swing.JLabel rdLabel;
    private javax.swing.JTextField return1;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchText;
    private javax.swing.JComboBox<String> serviceClass;
    private javax.swing.JButton submit;
    private javax.swing.JLabel tLabel;
    private javax.swing.JLabel tital;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
